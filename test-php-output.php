<?php
/**
 * Generated by WhyML - WhyML Test App
 * Description: Test application to verify WhyML functionality
 * PHP Component Class
 */

<?php

namespace App\Components;

use InvalidArgumentException;
use RuntimeException;

/**
 * Test application to verify WhyML functionality
 *
 * @version 1.0.0
 * @author WhyML Generator
 * @package App\Components
 */
class WhymlTestAppComponent
{
    /**
     * Component data
     * @var array
     */
    private array $data = [];

    /**
     * Component styles
     * @var array
     */
    private array $styles = [
            'container' => 'width: 100%; max-width: 800px; margin: 0 auto; padding: 20px;',
            'main-title' => 'color: #007acc; font-family: Helvetica, Arial, sans-serif; font-size: 32px;',
            'intro' => 'font-family: Arial, sans-serif; color: #333; margin: 16px 0;',
            'section-title' => 'color: #007acc; font-family: Helvetica, Arial, sans-serif; font-size: 24px; margin-top: 24px;',
            'feature-list' => 'font-family: Arial, sans-serif; color: #333; padding-left: 20px;',
            'features-section' => 'margin-top: 20px;'
        ];

    /**
     * Constructor
     * @param array $data Initial component data
     */
    public function __construct(array $data = []): void
    {
        $this->data = $data;
    }

    /**
     * Render the component
     * @return string HTML output
     */
    public function render(): string
    {
        $html = '';

        $html .= '<div' . '' . '>';
        $html .= '<div' . $this->buildAttributes(['class' => 'container']) . '>';
        $html .= '<h1' . '' . '>';
        $html .= '<div' . $this->buildAttributes(['class' => 'main-title']) . '>' . $this->escapeHtml('Welcome to WhyML Test App') . '</div>';
        $html .= '</h1>';
        $html .= '<p' . '' . '>';
        $html .= '<div' . $this->buildAttributes(['class' => 'intro']) . '>' . $this->escapeHtml('This is a test application to verify WhyML CLI functionality works correctly.') . '</div>';
        $html .= '</p>';
        $html .= '<div' . '' . '>';
        $html .= '<div' . $this->buildAttributes(['class' => 'features-section']) . '>';
        $html .= '<h2' . '' . '>';
        $html .= '<div' . $this->buildAttributes(['class' => 'section-title']) . '>' . $this->escapeHtml('Features') . '</div>';
        $html .= '</h2>';
        $html .= '<ul' . '' . '>';
        $html .= '<div' . $this->buildAttributes(['class' => 'feature-list']) . '>';
        $html .= '<li' . '' . '>';
        $html .= '<div' . '' . '>' . $this->escapeHtml('CLI Commands') . '</div>';
        $html .= '</li>';
        $html .= '<li' . '' . '>';
        $html .= '<div' . '' . '>' . $this->escapeHtml('Natural Language Conversion') . '</div>';
        $html .= '</li>';
        $html .= '<li' . '' . '>';
        $html .= '<div' . '' . '>' . $this->escapeHtml('Application Generators') . '</div>';
        $html .= '</li>';
        $html .= '<li' . '' . '>';
        $html .= '<div' . '' . '>' . $this->escapeHtml('Development Server') . '</div>';
        $html .= '</li>';
        $html .= '</div>';
        $html .= '</ul>';
        $html .= '</div>';
        $html .= '</div>';
        $html .= '</div>';
        $html .= '</div>';

        return $html;
    }

    /**
     * Get component styles as CSS
     * @return string CSS styles
     */
    public function getStyles(): string
    {
        $css = '';

        $css .= '.container { width: 100%; max-width: 800px; margin: 0 auto; padding: 20px; }' . "\n";
        $css .= '.main-title { color: #007acc; font-family: Helvetica, Arial, sans-serif; font-size: 32px; }' . "\n";
        $css .= '.intro { font-family: Arial, sans-serif; color: #333; margin: 16px 0; }' . "\n";
        $css .= '.section-title { color: #007acc; font-family: Helvetica, Arial, sans-serif; font-size: 24px; margin-top: 24px; }' . "\n";
        $css .= '.feature-list { font-family: Arial, sans-serif; color: #333; padding-left: 20px; }' . "\n";
        $css .= '.features-section { margin-top: 20px; }' . "\n";

        return $css;
    }

    /**
     * Set component data
     * @param string $key Data key
     * @param mixed $value Data value
     * @return self
     */
    public function setData(string $key, mixed $value): self
    {
        $this->data[$key] = $value;
        return $this;
    }

    /**
     * Get component data
     * @param string $key Data key
     * @param mixed $default Default value
     * @return mixed
     */
    public function getData(string $key, mixed $default = null): mixed
    {
        return $this->data[$key] ?? $default;
    }


    /**
     * Escape HTML content
     * @param string $content Content to escape
     * @return string Escaped content
     */
    private function escapeHtml(string $content): string
    {
        return htmlspecialchars($content, ENT_QUOTES | ENT_HTML5, 'UTF-8');
    }

    /**
     * Build HTML attributes string
     * @param array $attributes Attributes array
     * @return string Attributes string
     */
    private function buildAttributes(array $attributes): string
    {
        $attr = [];
        foreach ($attributes as $key => $value) {
            if ($value !== null && $value !== false) {
                $attr[] = $key . '="' . $this->escapeHtml($value) . '"';
            }
        }
        return empty($attr) ? '' : ' ' . implode(' ', $attr);
    }
}
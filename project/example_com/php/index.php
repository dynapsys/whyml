<?php
/**
 * Generated by WhyML - Example Domain
 * PHP Component Class
 */

<?php

namespace App\Components;

use InvalidArgumentException;
use RuntimeException;

/**
 * ExampleDomainComponent - Generated by WhyML
 *
 * @version 1.0.0
 * @author WhyML Generator
 * @package App\Components
 */
class ExampleDomainComponent
{
    /**
     * Component data
     * @var array
     */
    private array $data = [];

    /**
     * Component styles
     * @var array
     */
    private array $styles = [
            'global' => 'body { background-color: #f0f0f2; margin: 0; padding: 0; font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif; } div { width: 600px; margin: 5em auto; padding: 2em; background-color: #fdfdff; border-radius: 0.5em; box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02); } a:link, a:visited { color: #38488f; text-decoration: none; } @media (max-width: 700px) { div { margin: 0 auto; width: auto; } }',
            'body' => 'background-color: #f0f0f2; margin: 0; padding: 0; font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;',
            'div' => 'width: 600px; margin: 5em auto; padding: 2em; background-color: #fdfdff; border-radius: 0.5em; box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);',
            'a_link__a_visited' => 'color: #38488f; text-decoration: none;'
        ];

    /**
     * Constructor
     * @param array $data Initial component data
     */
    public function __construct(array $data = []): void
    {
        $this->data = $data;
    }

    /**
     * Render the component
     * @return string HTML output
     */
    public function render(): string
    {
        $html = '';

        $html .= '<div' . $this->buildAttributes(['class' => 'page-container']) . '>';
        $html .= '<div' . '' . '>' . $this->escapeHtml('Example Domain') . '</div>';
        $html .= '<div' . '' . '>' . $this->escapeHtml('This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.') . '</div>';
        $html .= '<div' . '' . '>' . $this->escapeHtml('More information...') . '</div>';
        $html .= '<div' . $this->buildAttributes(['href' => 'https://www.iana.org/domains/example']) . '>' . $this->escapeHtml('More information...') . '</div>';
        $html .= '</div>';

        return $html;
    }

    /**
     * Get component styles as CSS
     * @return string CSS styles
     */
    public function getStyles(): string
    {
        $css = '';

        $css .= '.global { body { background-color: #f0f0f2; margin: 0; padding: 0; font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif; } div { width: 600px; margin: 5em auto; padding: 2em; background-color: #fdfdff; border-radius: 0.5em; box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02); } a:link, a:visited { color: #38488f; text-decoration: none; } @media (max-width: 700px) { div { margin: 0 auto; width: auto; } } }' . "\n";
        $css .= '.body { background-color: #f0f0f2; margin: 0; padding: 0; font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif; }' . "\n";
        $css .= '.div { width: 600px; margin: 5em auto; padding: 2em; background-color: #fdfdff; border-radius: 0.5em; box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02); }' . "\n";
        $css .= '.a_link__a_visited { color: #38488f; text-decoration: none; }' . "\n";

        return $css;
    }

    /**
     * Set component data
     * @param string $key Data key
     * @param mixed $value Data value
     * @return self
     */
    public function setData(string $key, mixed $value): self
    {
        $this->data[$key] = $value;
        return $this;
    }

    /**
     * Get component data
     * @param string $key Data key
     * @param mixed $default Default value
     * @return mixed
     */
    public function getData(string $key, mixed $default = null): mixed
    {
        return $this->data[$key] ?? $default;
    }


    /**
     * Escape HTML content
     * @param string $content Content to escape
     * @return string Escaped content
     */
    private function escapeHtml(string $content): string
    {
        return htmlspecialchars($content, ENT_QUOTES | ENT_HTML5, 'UTF-8');
    }

    /**
     * Build HTML attributes string
     * @param array $attributes Attributes array
     * @return string Attributes string
     */
    private function buildAttributes(array $attributes): string
    {
        $attr = [];
        foreach ($attributes as $key => $value) {
            if ($value !== null && $value !== false) {
                $attr[] = $key . '="' . $this->escapeHtml($value) . '"';
            }
        }
        return empty($attr) ? '' : ' ' . implode(' ', $attr);
    }
}
<?php
/**
 * Generated by WhyML - Example Domain
 * Description: Content from Example Domain - scraped from example.com
 * PHP Component Class
 */

<?php

namespace App\Components;

use InvalidArgumentException;
use RuntimeException;

/**
 * Content from Example Domain - scraped from example.com
 *
 * @version 1.0.0
 * @author WhyML Generator
 * @package App\Components
 */
class ExampleDomainComponent
{
    /**
     * Component data
     * @var array
     */
    private array $data = [];

    /**
     * Constructor
     * @param array $data Initial component data
     */
    public function __construct(array $data = []): void
    {
        $this->data = $data;
    }

    /**
     * Render the component
     * @return string HTML output
     */
    public function render(): string
    {
        $html = '';

        $html .= '<div' . '' . '></div>';

        return $html;
    }

    /**
     * Set component data
     * @param string $key Data key
     * @param mixed $value Data value
     * @return self
     */
    public function setData(string $key, mixed $value): self
    {
        $this->data[$key] = $value;
        return $this;
    }

    /**
     * Get component data
     * @param string $key Data key
     * @param mixed $default Default value
     * @return mixed
     */
    public function getData(string $key, mixed $default = null): mixed
    {
        return $this->data[$key] ?? $default;
    }


    /**
     * Escape HTML content
     * @param string $content Content to escape
     * @return string Escaped content
     */
    private function escapeHtml(string $content): string
    {
        return htmlspecialchars($content, ENT_QUOTES | ENT_HTML5, 'UTF-8');
    }

    /**
     * Build HTML attributes string
     * @param array $attributes Attributes array
     * @return string Attributes string
     */
    private function buildAttributes(array $attributes): string
    {
        $attr = [];
        foreach ($attributes as $key => $value) {
            if ($value !== null && $value !== false) {
                $attr[] = $key . '="' . $this->escapeHtml($value) . '"';
            }
        }
        return empty($attr) ? '' : ' ' . implode(' ', $attr);
    }
}
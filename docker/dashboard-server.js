const express = require('express');
const path = require('path');
const fs = require('fs');
const cors = require('cors');

const app = express();
const PORT = 80;

// Enable CORS
app.use(cors({
    origin: '*',
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));

// Serve static files
app.use(express.static('.'));

// Services configuration
const services = [
    { name: 'Source (Original)', port: 8015, path: 'source', description: 'Original scraped HTML content', color: '#6c757d' },
    { name: 'HTML Static', port: 8011, path: 'html', description: 'Static HTML generated by WhyML', color: '#e74c3c' },  
    { name: 'JavaScript/Node.js', port: 8012, path: 'js', description: 'JavaScript/Node.js implementation', color: '#f1c40f' },
    { name: 'PHP 8.2', port: 8013, path: 'php', description: 'PHP 8.2 class-based implementation', color: '#8e44ad' },
    { name: 'React', port: 8014, path: 'react', description: 'React TSX component', color: '#61dafb' },
    { name: 'TypeScript', port: 8016, path: 'ts', description: 'TypeScript implementation', color: '#3178c6' },
    { name: 'Vue.js', port: 8017, path: 'vue', description: 'Vue.js component', color: '#4fc08d' }
];

// Main dashboard route
app.get('/', (req, res) => {
    try {
        const html = fs.readFileSync('./dashboard.html', 'utf8');
        res.send(html);
    } catch (error) {
        console.error('Error reading dashboard.html:', error);
        res.status(500).send('Dashboard error');
    }
});

// API endpoint to get services configuration
app.get('/api/services', (req, res) => {
    res.json(services);
});

// API endpoint to get project information
app.get('/api/project-info', (req, res) => {
    try {
        const projectPath = '/app/project/example_com';
        const info = {
            project: 'example_com',
            services: services.length,
            description: 'WhyML Conversion Demonstration - Visual comparison of HTML conversion to different technology stacks',
            timestamp: new Date().toISOString(),
            ports: services.map(s => ({ name: s.name, port: s.port, color: s.color }))
        };
        res.json(info);
    } catch (error) {
        console.error('Error getting project info:', error);
        res.status(500).json({ error: 'Failed to get project information' });
    }
});

// Screenshot endpoint (proxy to screenshot service)
app.get('/api/screenshot/:port', async (req, res) => {
    try {
        const port = req.params.port;
        const response = await fetch(`http://screenshot-service:3000/screenshot?url=http://localhost:${port}`);
        const imageBuffer = await response.buffer();
        
        res.setHeader('Content-Type', 'image/png');
        res.send(imageBuffer);
    } catch (error) {
        console.error('Screenshot error:', error);
        res.status(500).json({ error: 'Screenshot generation failed' });
    }
});

app.listen(PORT, '0.0.0.0', () => {
    console.log(`Dashboard server running on port ${PORT}`);
    console.log('Services overview:');
    services.forEach(service => {
        console.log(`  - ${service.name}: http://localhost:${service.port} (${service.path})`);
    });
});
